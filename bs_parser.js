var BS = {};
BS.Parser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "arithmetic_expr": parse_arithmetic_expr,
        "array": parse_array,
        "array_param": parse_array_param,
        "assign_stmt": parse_assign_stmt,
        "boolean_const": parse_boolean_const,
        "comment": parse_comment,
        "comment_stmt": parse_comment_stmt,
        "conditional_expr": parse_conditional_expr,
        "const_declaration_stmt": parse_const_declaration_stmt,
        "constant": parse_constant,
        "dec_parameter": parse_dec_parameter,
        "dec_parameter_list": parse_dec_parameter_list,
        "dec_parameters": parse_dec_parameters,
        "declaration": parse_declaration,
        "else": parse_else,
        "else_if_stmt": parse_else_if_stmt,
        "else_stmt": parse_else_stmt,
        "exit_stmt": parse_exit_stmt,
        "expression_list": parse_expression_list,
        "float": parse_float,
        "float_const": parse_float_const,
        "flow_control": parse_flow_control,
        "for_stmt": parse_for_stmt,
        "function_methd": parse_function_methd,
        "identifier": parse_identifier,
        "identifier_param": parse_identifier_param,
        "if_stmt": parse_if_stmt,
        "integer": parse_integer,
        "integer_const": parse_integer_const,
        "method": parse_method,
        "method_call": parse_method_call,
        "methods": parse_methods,
        "multiline_comment_stmt": parse_multiline_comment_stmt,
        "name": parse_name,
        "not_expr": parse_not_expr,
        "primary_expr": parse_primary_expr,
        "return_stmt": parse_return_stmt,
        "statement": parse_statement,
        "statements": parse_statements,
        "string_const": parse_string_const,
        "subroutine_methd": parse_subroutine_methd,
        "system_call": parse_system_call,
        "system_methods": parse_system_methods,
        "term": parse_term,
        "types": parse_types,
        "var_declaration_stmt": parse_var_declaration_stmt,
        "variable": parse_variable,
        "while_stmt": parse_while_stmt,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "methods";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_methods() {
        var cacheKey = 'methods@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_method();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_method();
        }
        var result0 = result1 !== null
          ? (function(methds) { return methds; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_method() {
        var cacheKey = 'method@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result12 = [];
        var result18 = parse_whitespace();
        while (result18 !== null) {
          result12.push(result18);
          var result18 = parse_whitespace();
        }
        if (result12 !== null) {
          var result17 = parse_subroutine_methd();
          if (result17 !== null) {
            var result13 = result17;
          } else {
            var result16 = parse_function_methd();
            if (result16 !== null) {
              var result13 = result16;
            } else {
              var result13 = null;;
            };
          }
          if (result13 !== null) {
            var result14 = [];
            var result15 = parse_whitespace();
            while (result15 !== null) {
              result14.push(result15);
              var result15 = parse_whitespace();
            }
            if (result14 !== null) {
              var result11 = [result12, result13, result14];
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        var result10 = result11 !== null
          ? (function(methd) { return methd; })(result11[1])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result9 = parse_whitespace();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_whitespace();
          }
          if (result3 !== null) {
            var result8 = parse_comment();
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var result7 = parse_const_declaration_stmt();
              if (result7 !== null) {
                var result4 = result7;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_whitespace();
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_whitespace();
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(stmt) { return stmt;})(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_subroutine_methd() {
        var cacheKey = 'subroutine_methd@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "sub") {
          var result2 = "sub";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"sub\"");
          }
        }
        if (result2 !== null) {
          var result13 = parse_whitespace();
          if (result13 !== null) {
            var result3 = [];
            while (result13 !== null) {
              result3.push(result13);
              var result13 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_name();
            if (result4 !== null) {
              var result5 = parse_dec_parameter_list();
              if (result5 !== null) {
                var result6 = parse_statements();
                if (result6 !== null) {
                  var result7 = [];
                  var result12 = parse_whitespace();
                  while (result12 !== null) {
                    result7.push(result12);
                    var result12 = parse_whitespace();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 3) === "end") {
                      var result8 = "end";
                      pos += 3;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"end\"");
                      }
                    }
                    if (result8 !== null) {
                      var result11 = parse_whitespace();
                      if (result11 !== null) {
                        var result9 = [];
                        while (result11 !== null) {
                          result9.push(result11);
                          var result11 = parse_whitespace();
                        }
                      } else {
                        var result9 = null;
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 3) === "sub") {
                          var result10 = "sub";
                          pos += 3;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"sub\"");
                          }
                        }
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params, body) { return new AstMethod(name, params, undefined, body); })(result1[2], result1[3], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_methd() {
        var cacheKey = 'function_methd@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "function") {
          var result2 = "function";
          pos += 8;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"function\"");
          }
        }
        if (result2 !== null) {
          var result19 = parse_whitespace();
          if (result19 !== null) {
            var result3 = [];
            while (result19 !== null) {
              result3.push(result19);
              var result19 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_name();
            if (result4 !== null) {
              var result5 = parse_dec_parameter_list();
              if (result5 !== null) {
                var result18 = parse_whitespace();
                if (result18 !== null) {
                  var result6 = [];
                  while (result18 !== null) {
                    result6.push(result18);
                    var result18 = parse_whitespace();
                  }
                } else {
                  var result6 = null;
                }
                if (result6 !== null) {
                  if (input.substr(pos, 2) === "as") {
                    var result7 = "as";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"as\"");
                    }
                  }
                  if (result7 !== null) {
                    var result17 = parse_whitespace();
                    if (result17 !== null) {
                      var result8 = [];
                      while (result17 !== null) {
                        result8.push(result17);
                        var result17 = parse_whitespace();
                      }
                    } else {
                      var result8 = null;
                    }
                    if (result8 !== null) {
                      var result9 = parse_types();
                      if (result9 !== null) {
                        var result10 = parse_statements();
                        if (result10 !== null) {
                          var result11 = [];
                          var result16 = parse_whitespace();
                          while (result16 !== null) {
                            result11.push(result16);
                            var result16 = parse_whitespace();
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 3) === "end") {
                              var result12 = "end";
                              pos += 3;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"end\"");
                              }
                            }
                            if (result12 !== null) {
                              var result15 = parse_whitespace();
                              if (result15 !== null) {
                                var result13 = [];
                                while (result15 !== null) {
                                  result13.push(result15);
                                  var result15 = parse_whitespace();
                                }
                              } else {
                                var result13 = null;
                              }
                              if (result13 !== null) {
                                if (input.substr(pos, 8) === "function") {
                                  var result14 = "function";
                                  pos += 8;
                                } else {
                                  var result14 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"function\"");
                                  }
                                }
                                if (result14 !== null) {
                                  var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params, type, body) { return new AstMethod(name, params, type, body); })(result1[2], result1[3], result1[7], result1[8])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dec_parameter_list() {
        var cacheKey = 'dec_parameter_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_whitespace();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_whitespace();
          }
          if (result3 !== null) {
            var result8 = parse_dec_parameters();
            var result4 = result8 !== null ? result8 : '';
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_whitespace();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_whitespace();
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(params) { return params ? params : []; })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dec_parameters() {
        var cacheKey = 'dec_parameters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var savedPos1 = pos;
        var result6 = parse_dec_parameter();
        if (result6 !== null) {
          var result7 = [];
          var result11 = parse_whitespace();
          while (result11 !== null) {
            result7.push(result11);
            var result11 = parse_whitespace();
          }
          if (result7 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result8 = ",";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result8 !== null) {
              var result9 = [];
              var result10 = parse_whitespace();
              while (result10 !== null) {
                result9.push(result10);
                var result10 = parse_whitespace();
              }
              if (result9 !== null) {
                var result5 = [result6, result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        var result4 = result5 !== null
          ? (function(param) { return param; })(result5[0])
          : null;
        while (result4 !== null) {
          result2.push(result4);
          var savedPos1 = pos;
          var result6 = parse_dec_parameter();
          if (result6 !== null) {
            var result7 = [];
            var result11 = parse_whitespace();
            while (result11 !== null) {
              result7.push(result11);
              var result11 = parse_whitespace();
            }
            if (result7 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result8 = ",";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result8 !== null) {
                var result9 = [];
                var result10 = parse_whitespace();
                while (result10 !== null) {
                  result9.push(result10);
                  var result10 = parse_whitespace();
                }
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          var result4 = result5 !== null
            ? (function(param) { return param; })(result5[0])
            : null;
        }
        if (result2 !== null) {
          var result3 = parse_dec_parameter();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(params, param) { params ? params : []; params.push(param); return params; })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dec_parameter() {
        var cacheKey = 'dec_parameter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_identifier_param();
        if (result2 !== null) {
          var result8 = parse_whitespace();
          if (result8 !== null) {
            var result3 = [];
            while (result8 !== null) {
              result3.push(result8);
              var result8 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result4 = "as";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result4 !== null) {
              var result7 = parse_whitespace();
              if (result7 !== null) {
                var result5 = [];
                while (result7 !== null) {
                  result5.push(result7);
                  var result7 = parse_whitespace();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result6 = parse_types();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(term, type) { return new AstVarDeclaration(term, type, ""); })(result1[0], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statements() {
        var cacheKey = 'statements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_statement();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_statement();
        }
        var result0 = result1 !== null
          ? (function(stmts) { return stmts; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_whitespace();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_whitespace();
        }
        if (result2 !== null) {
          var result11 = parse_comment();
          if (result11 !== null) {
            var result3 = result11;
          } else {
            var result10 = parse_flow_control();
            if (result10 !== null) {
              var result3 = result10;
            } else {
              var result9 = parse_declaration();
              if (result9 !== null) {
                var result3 = result9;
              } else {
                var result8 = parse_assign_stmt();
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  var result7 = parse_system_call();
                  if (result7 !== null) {
                    var result3 = result7;
                  } else {
                    var result6 = parse_method_call();
                    if (result6 !== null) {
                      var result3 = result6;
                    } else {
                      var result3 = null;;
                    };
                  };
                };
              };
            };
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = parse_whitespace();
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_whitespace();
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(stmt) { return stmt; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_comment_stmt();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_multiline_comment_stmt();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment_stmt() {
        var cacheKey = 'comment_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result2 = "//";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[     ]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	]");
            }
          }
          while (result9 !== null) {
            result3.push(result9);
            if (input.substr(pos).match(/^[ 	]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	]");
              }
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
            while (result8 !== null) {
              result4.push(result8);
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result4 !== null) {
              var result5 = [];
              if (input.substr(pos).match(/^[ 	]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[ 	]");
                }
              }
              while (result7 !== null) {
                result5.push(result7);
                if (input.substr(pos).match(/^[ 	]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[ 	]");
                  }
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "\n") {
                  var result6 = "\n";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\n\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(message) { return new AstComment(message.join('')); })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiline_comment_stmt() {
        var cacheKey = 'multiline_comment_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result2 = "/*";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_whitespace();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_whitespace();
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[^'*\/']/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^'*\\/']");
              }
            }
            while (result8 !== null) {
              result4.push(result8);
              if (input.substr(pos).match(/^[^'*\/']/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[^'*\\/']");
                }
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_whitespace();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_whitespace();
              }
              if (result5 !== null) {
                if (input.substr(pos, 2) === "*/") {
                  var result6 = "*/";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*/\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(message) { return new AstComment(message.join('')); })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declaration() {
        var cacheKey = 'declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_var_declaration_stmt();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_const_declaration_stmt();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_var_declaration_stmt() {
        var cacheKey = 'var_declaration_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "var") {
          var result2 = "var";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"var\"");
          }
        }
        if (result2 !== null) {
          var result20 = parse_whitespace();
          if (result20 !== null) {
            var result3 = [];
            while (result20 !== null) {
              result3.push(result20);
              var result20 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_identifier();
            if (result4 !== null) {
              var result19 = parse_whitespace();
              if (result19 !== null) {
                var result5 = [];
                while (result19 !== null) {
                  result5.push(result19);
                  var result19 = parse_whitespace();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                if (input.substr(pos, 2) === "as") {
                  var result6 = "as";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"as\"");
                  }
                }
                if (result6 !== null) {
                  var result18 = parse_whitespace();
                  if (result18 !== null) {
                    var result7 = [];
                    while (result18 !== null) {
                      result7.push(result18);
                      var result18 = parse_whitespace();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result8 = parse_types();
                    if (result8 !== null) {
                      var result9 = [];
                      var result17 = parse_whitespace();
                      while (result17 !== null) {
                        result9.push(result17);
                        var result17 = parse_whitespace();
                      }
                      if (result9 !== null) {
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "=") {
                          var result13 = "=";
                          pos += 1;
                        } else {
                          var result13 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"=\"");
                          }
                        }
                        if (result13 !== null) {
                          var result14 = [];
                          var result16 = parse_whitespace();
                          while (result16 !== null) {
                            result14.push(result16);
                            var result16 = parse_whitespace();
                          }
                          if (result14 !== null) {
                            var result15 = parse_conditional_expr();
                            if (result15 !== null) {
                              var result12 = [result13, result14, result15];
                            } else {
                              var result12 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result12 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result12 = null;
                          pos = savedPos1;
                        }
                        var result11 = result12 !== null
                          ? (function(expr) { return expr; })(result12[2])
                          : null;
                        var result10 = result11 !== null ? result11 : '';
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(variable, type, expr) { return new AstVarDeclaration(variable, type, expr); })(result1[2], result1[6], result1[8])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_const_declaration_stmt() {
        var cacheKey = 'const_declaration_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "const") {
          var result2 = "const";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"const\"");
          }
        }
        if (result2 !== null) {
          var result17 = parse_whitespace();
          if (result17 !== null) {
            var result3 = [];
            while (result17 !== null) {
              result3.push(result17);
              var result17 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_variable();
            if (result4 !== null) {
              var result16 = parse_whitespace();
              if (result16 !== null) {
                var result5 = [];
                while (result16 !== null) {
                  result5.push(result16);
                  var result16 = parse_whitespace();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                if (input.substr(pos, 2) === "as") {
                  var result6 = "as";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"as\"");
                  }
                }
                if (result6 !== null) {
                  var result15 = parse_whitespace();
                  if (result15 !== null) {
                    var result7 = [];
                    while (result15 !== null) {
                      result7.push(result15);
                      var result15 = parse_whitespace();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result8 = parse_types();
                    if (result8 !== null) {
                      var result9 = [];
                      var result14 = parse_whitespace();
                      while (result14 !== null) {
                        result9.push(result14);
                        var result14 = parse_whitespace();
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "=") {
                          var result10 = "=";
                          pos += 1;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"=\"");
                          }
                        }
                        if (result10 !== null) {
                          var result11 = [];
                          var result13 = parse_whitespace();
                          while (result13 !== null) {
                            result11.push(result13);
                            var result13 = parse_whitespace();
                          }
                          if (result11 !== null) {
                            var result12 = parse_conditional_expr();
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(variable, type, expr) { return new AstConstDeclaration(variable, type, expr); })(result1[2], result1[6], result1[10])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assign_stmt() {
        var cacheKey = 'assign_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_identifier();
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_whitespace();
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_whitespace();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result4 = "=";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_whitespace();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_whitespace();
              }
              if (result5 !== null) {
                var result6 = parse_conditional_expr();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(id, expr) { return new AstAssignment(id, expr); })(result1[0], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_flow_control() {
        var cacheKey = 'flow_control@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_if_stmt();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_while_stmt();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_for_stmt();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_exit_stmt();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_return_stmt();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_return_stmt() {
        var cacheKey = 'return_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "return") {
          var result2 = "return";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result2 !== null) {
          var result5 = parse_whitespace();
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              var result5 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_conditional_expr();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expr) { return new AstReturn(expr); })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exit_stmt() {
        var cacheKey = 'exit_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "exit") {
          var result2 = "exit";
          pos += 4;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"exit\"");
          }
        }
        if (result2 !== null) {
          var result7 = parse_whitespace();
          if (result7 !== null) {
            var result3 = [];
            while (result7 !== null) {
              result3.push(result7);
              var result7 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "for") {
              var result6 = "for";
              pos += 3;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"for\"");
              }
            }
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 5) === "while") {
                var result5 = "while";
                pos += 5;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"while\"");
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(flowType) { return new AstExit(flowType); })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_if_stmt() {
        var cacheKey = 'if_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "if") {
          var result2 = "if";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result2 !== null) {
          var result23 = parse_whitespace();
          if (result23 !== null) {
            var result3 = [];
            while (result23 !== null) {
              result3.push(result23);
              var result23 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_conditional_expr();
            if (result4 !== null) {
              var result22 = parse_whitespace();
              if (result22 !== null) {
                var result5 = [];
                while (result22 !== null) {
                  result5.push(result22);
                  var result22 = parse_whitespace();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                if (input.substr(pos, 4) === "then") {
                  var result6 = "then";
                  pos += 4;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"then\"");
                  }
                }
                if (result6 !== null) {
                  var result21 = parse_whitespace();
                  if (result21 !== null) {
                    var result7 = [];
                    while (result21 !== null) {
                      result7.push(result21);
                      var result21 = parse_whitespace();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result20 = parse_statements();
                    var result8 = result20 !== null ? result20 : '';
                    if (result8 !== null) {
                      var result9 = [];
                      var result19 = parse_whitespace();
                      while (result19 !== null) {
                        result9.push(result19);
                        var result19 = parse_whitespace();
                      }
                      if (result9 !== null) {
                        var savedPos1 = pos;
                        if (input.substr(pos, 3) === "end") {
                          var result15 = "end";
                          pos += 3;
                        } else {
                          var result15 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"end\"");
                          }
                        }
                        if (result15 !== null) {
                          var result18 = parse_whitespace();
                          if (result18 !== null) {
                            var result16 = [];
                            while (result18 !== null) {
                              result16.push(result18);
                              var result18 = parse_whitespace();
                            }
                          } else {
                            var result16 = null;
                          }
                          if (result16 !== null) {
                            if (input.substr(pos, 2) === "if") {
                              var result17 = "if";
                              pos += 2;
                            } else {
                              var result17 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (result17 !== null) {
                              var result14 = [result15, result16, result17];
                            } else {
                              var result14 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result14 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos1;
                        }
                        var result13 = result14 !== null
                          ? (function() { return []; })()
                          : null;
                        if (result13 !== null) {
                          var result10 = result13;
                        } else {
                          var result12 = parse_else();
                          var result11 = result12 !== null ? result12 : '';
                          if (result11 !== null) {
                            var result10 = result11;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition, body, elseBody) { return new AstIf(condition, body, elseBody); })(result1[2], result1[6], result1[8])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_else() {
        var cacheKey = 'else@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_else_if_stmt();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_else_stmt();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_else_if_stmt() {
        var cacheKey = 'else_if_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "else") {
          var result2 = "else";
          pos += 4;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[ 	]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	]");
            }
          }
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              if (input.substr(pos).match(/^[ 	]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[ 	]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_if_stmt();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ifstmt) { return [ifstmt]; })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_else_stmt() {
        var cacheKey = 'else_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "else") {
          var result2 = "else";
          pos += 4;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }
        if (result2 !== null) {
          var result12 = parse_whitespace();
          if (result12 !== null) {
            var result3 = [];
            while (result12 !== null) {
              result3.push(result12);
              var result12 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result11 = parse_statements();
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              var result5 = [];
              var result10 = parse_whitespace();
              while (result10 !== null) {
                result5.push(result10);
                var result10 = parse_whitespace();
              }
              if (result5 !== null) {
                if (input.substr(pos, 3) === "end") {
                  var result6 = "end";
                  pos += 3;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"end\"");
                  }
                }
                if (result6 !== null) {
                  var result9 = parse_whitespace();
                  if (result9 !== null) {
                    var result7 = [];
                    while (result9 !== null) {
                      result7.push(result9);
                      var result9 = parse_whitespace();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 2) === "if") {
                      var result8 = "if";
                      pos += 2;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"if\"");
                      }
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(elseBody) { return elseBody ? elseBody : []; })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_while_stmt() {
        var cacheKey = 'while_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "while") {
          var result2 = "while";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"while\"");
          }
        }
        if (result2 !== null) {
          var result15 = parse_whitespace();
          if (result15 !== null) {
            var result3 = [];
            while (result15 !== null) {
              result3.push(result15);
              var result15 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_conditional_expr();
            if (result4 !== null) {
              var result14 = parse_whitespace();
              if (result14 !== null) {
                var result5 = [];
                while (result14 !== null) {
                  result5.push(result14);
                  var result14 = parse_whitespace();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result13 = parse_statements();
                var result6 = result13 !== null ? result13 : '';
                if (result6 !== null) {
                  var result7 = [];
                  var result12 = parse_whitespace();
                  while (result12 !== null) {
                    result7.push(result12);
                    var result12 = parse_whitespace();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 3) === "end") {
                      var result8 = "end";
                      pos += 3;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"end\"");
                      }
                    }
                    if (result8 !== null) {
                      var result11 = parse_whitespace();
                      if (result11 !== null) {
                        var result9 = [];
                        while (result11 !== null) {
                          result9.push(result11);
                          var result11 = parse_whitespace();
                        }
                      } else {
                        var result9 = null;
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 5) === "while") {
                          var result10 = "while";
                          pos += 5;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"while\"");
                          }
                        }
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition, body) { return new AstWhile(condition, body); })(result1[2], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_for_stmt() {
        var cacheKey = 'for_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "for") {
          var result2 = "for";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result2 !== null) {
          var result36 = parse_whitespace();
          if (result36 !== null) {
            var result3 = [];
            while (result36 !== null) {
              result3.push(result36);
              var result36 = parse_whitespace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_variable();
            if (result4 !== null) {
              var result5 = [];
              var result35 = parse_whitespace();
              while (result35 !== null) {
                result5.push(result35);
                var result35 = parse_whitespace();
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "=") {
                  var result6 = "=";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result34 = parse_whitespace();
                  while (result34 !== null) {
                    result7.push(result34);
                    var result34 = parse_whitespace();
                  }
                  if (result7 !== null) {
                    var result8 = parse_conditional_expr();
                    if (result8 !== null) {
                      var result33 = parse_whitespace();
                      if (result33 !== null) {
                        var result9 = [];
                        while (result33 !== null) {
                          result9.push(result33);
                          var result33 = parse_whitespace();
                        }
                      } else {
                        var result9 = null;
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 2) === "to") {
                          var result10 = "to";
                          pos += 2;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"to\"");
                          }
                        }
                        if (result10 !== null) {
                          var result32 = parse_whitespace();
                          if (result32 !== null) {
                            var result11 = [];
                            while (result32 !== null) {
                              result11.push(result32);
                              var result32 = parse_whitespace();
                            }
                          } else {
                            var result11 = null;
                          }
                          if (result11 !== null) {
                            var result12 = parse_conditional_expr();
                            if (result12 !== null) {
                              var savedPos1 = pos;
                              var result31 = parse_whitespace();
                              if (result31 !== null) {
                                var result26 = [];
                                while (result31 !== null) {
                                  result26.push(result31);
                                  var result31 = parse_whitespace();
                                }
                              } else {
                                var result26 = null;
                              }
                              if (result26 !== null) {
                                if (input.substr(pos, 4) === "step") {
                                  var result27 = "step";
                                  pos += 4;
                                } else {
                                  var result27 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"step\"");
                                  }
                                }
                                if (result27 !== null) {
                                  var result30 = parse_whitespace();
                                  if (result30 !== null) {
                                    var result28 = [];
                                    while (result30 !== null) {
                                      result28.push(result30);
                                      var result30 = parse_whitespace();
                                    }
                                  } else {
                                    var result28 = null;
                                  }
                                  if (result28 !== null) {
                                    var result29 = parse_conditional_expr();
                                    if (result29 !== null) {
                                      var result25 = [result26, result27, result28, result29];
                                    } else {
                                      var result25 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result25 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result25 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result25 = null;
                                pos = savedPos1;
                              }
                              var result24 = result25 !== null
                                ? (function(step) { return step; })(result25[3])
                                : null;
                              var result13 = result24 !== null ? result24 : '';
                              if (result13 !== null) {
                                var result23 = parse_whitespace();
                                if (result23 !== null) {
                                  var result14 = [];
                                  while (result23 !== null) {
                                    result14.push(result23);
                                    var result23 = parse_whitespace();
                                  }
                                } else {
                                  var result14 = null;
                                }
                                if (result14 !== null) {
                                  var result22 = parse_statements();
                                  var result15 = result22 !== null ? result22 : '';
                                  if (result15 !== null) {
                                    var result16 = [];
                                    var result21 = parse_whitespace();
                                    while (result21 !== null) {
                                      result16.push(result21);
                                      var result21 = parse_whitespace();
                                    }
                                    if (result16 !== null) {
                                      if (input.substr(pos, 3) === "end") {
                                        var result17 = "end";
                                        pos += 3;
                                      } else {
                                        var result17 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"end\"");
                                        }
                                      }
                                      if (result17 !== null) {
                                        var result20 = parse_whitespace();
                                        if (result20 !== null) {
                                          var result18 = [];
                                          while (result20 !== null) {
                                            result18.push(result20);
                                            var result20 = parse_whitespace();
                                          }
                                        } else {
                                          var result18 = null;
                                        }
                                        if (result18 !== null) {
                                          if (input.substr(pos, 3) === "for") {
                                            var result19 = "for";
                                            pos += 3;
                                          } else {
                                            var result19 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"for\"");
                                            }
                                          }
                                          if (result19 !== null) {
                                            var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                          } else {
                                            var result1 = null;
                                            pos = savedPos0;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(variable, lower, upper, step, body) { return new AstFor(variable, lower, upper, step ? step : new AstConstant("INTEGER", 1), body); })(result1[2], result1[6], result1[10], result1[11], result1[13])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conditional_expr() {
        var cacheKey = 'conditional_expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_arithmetic_expr();
        if (result4 !== null) {
          var result5 = [];
          var result18 = parse_whitespace();
          while (result18 !== null) {
            result5.push(result18);
            var result18 = parse_whitespace();
          }
          if (result5 !== null) {
            if (input.substr(pos, 3) === "and") {
              var result17 = "and";
              pos += 3;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"and\"");
              }
            }
            if (result17 !== null) {
              var result6 = result17;
            } else {
              if (input.substr(pos, 2) === "or") {
                var result16 = "or";
                pos += 2;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"or\"");
                }
              }
              if (result16 !== null) {
                var result6 = result16;
              } else {
                if (input.substr(pos, 1) === "=") {
                  var result15 = "=";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\"");
                  }
                }
                if (result15 !== null) {
                  var result6 = result15;
                } else {
                  if (input.substr(pos, 2) === "<=") {
                    var result14 = "<=";
                    pos += 2;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<=\"");
                    }
                  }
                  if (result14 !== null) {
                    var result6 = result14;
                  } else {
                    if (input.substr(pos, 2) === ">=") {
                      var result13 = ">=";
                      pos += 2;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">=\"");
                      }
                    }
                    if (result13 !== null) {
                      var result6 = result13;
                    } else {
                      if (input.substr(pos, 2) === "<>") {
                        var result12 = "<>";
                        pos += 2;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"<>\"");
                        }
                      }
                      if (result12 !== null) {
                        var result6 = result12;
                      } else {
                        if (input.substr(pos, 1) === "<") {
                          var result11 = "<";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"<\"");
                          }
                        }
                        if (result11 !== null) {
                          var result6 = result11;
                        } else {
                          if (input.substr(pos, 1) === ">") {
                            var result10 = ">";
                            pos += 1;
                          } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                              matchFailed("\">\"");
                            }
                          }
                          if (result10 !== null) {
                            var result6 = result10;
                          } else {
                            var result6 = null;;
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_whitespace();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_whitespace();
              }
              if (result7 !== null) {
                var result8 = parse_conditional_expr();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, cmp, right) { return new AstComparison(left, right, cmp); })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_arithmetic_expr();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arithmetic_expr() {
        var cacheKey = 'arithmetic_expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_not_expr();
        if (result4 !== null) {
          var result5 = [];
          var result14 = parse_whitespace();
          while (result14 !== null) {
            result5.push(result14);
            var result14 = parse_whitespace();
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result13 = "+";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result13 !== null) {
              var result6 = result13;
            } else {
              if (input.substr(pos, 1) === "-") {
                var result12 = "-";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result12 !== null) {
                var result6 = result12;
              } else {
                if (input.substr(pos, 1) === "*") {
                  var result11 = "*";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*\"");
                  }
                }
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  if (input.substr(pos, 1) === "/") {
                    var result10 = "/";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result6 = null;;
                  };
                };
              };
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_whitespace();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_whitespace();
              }
              if (result7 !== null) {
                var result8 = parse_arithmetic_expr();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, op, right) { return new AstArithmetic(left, right, op); })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_not_expr();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_not_expr() {
        var cacheKey = 'not_expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "not") {
          var result4 = "not";
          pos += 3;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"not\"");
          }
        }
        if (result4 !== null) {
          var result7 = parse_whitespace();
          if (result7 !== null) {
            var result5 = [];
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_whitespace();
            }
          } else {
            var result5 = null;
          }
          if (result5 !== null) {
            var result6 = parse_conditional_expr();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(right) { return new AstNot(right, 'not'); })(result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primary_expr();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary_expr() {
        var cacheKey = 'primary_expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result10 = parse_term();
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_whitespace();
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_whitespace();
            }
            if (result4 !== null) {
              var result5 = parse_conditional_expr();
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_whitespace();
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_whitespace();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(expr) { return expr; })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression_list() {
        var cacheKey = 'expression_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var savedPos1 = pos;
        var result6 = parse_conditional_expr();
        if (result6 !== null) {
          var result7 = [];
          var result11 = parse_whitespace();
          while (result11 !== null) {
            result7.push(result11);
            var result11 = parse_whitespace();
          }
          if (result7 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result8 = ",";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result8 !== null) {
              var result9 = [];
              var result10 = parse_whitespace();
              while (result10 !== null) {
                result9.push(result10);
                var result10 = parse_whitespace();
              }
              if (result9 !== null) {
                var result5 = [result6, result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        var result4 = result5 !== null
          ? (function(expr) { return expr; })(result5[0])
          : null;
        while (result4 !== null) {
          result2.push(result4);
          var savedPos1 = pos;
          var result6 = parse_conditional_expr();
          if (result6 !== null) {
            var result7 = [];
            var result11 = parse_whitespace();
            while (result11 !== null) {
              result7.push(result11);
              var result11 = parse_whitespace();
            }
            if (result7 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result8 = ",";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result8 !== null) {
                var result9 = [];
                var result10 = parse_whitespace();
                while (result10 !== null) {
                  result9.push(result10);
                  var result10 = parse_whitespace();
                }
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          var result4 = result5 !== null
            ? (function(expr) { return expr; })(result5[0])
            : null;
        }
        if (result2 !== null) {
          var result3 = parse_conditional_expr();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(exprs, expr) { exprs = exprs ? exprs : []; exprs.push(expr); return exprs; })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_term() {
        var cacheKey = 'term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_system_call();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_method_call();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_constant();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_identifier();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_system_call() {
        var cacheKey = 'system_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_system_methods();
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_whitespace();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_whitespace();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_expression_list();
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_whitespace();
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_whitespace();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params) { return new AstSystemCall(name, params); })(result1[0], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_method_call() {
        var cacheKey = 'method_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_name();
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_whitespace();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_whitespace();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_expression_list();
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_whitespace();
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_whitespace();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params) { return new AstMethodCall(name, params); })(result1[0], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_array();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier_param() {
        var cacheKey = 'identifier_param@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_array_param();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable() {
        var cacheKey = 'variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_name();
        var result0 = result1 !== null
          ? (function(variable) { return new AstVariableRef(variable); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array_param() {
        var cacheKey = 'array_param@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_name();
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result6 = parse_whitespace();
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result5 = "]";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return new AstArrayRef(name, undefined); })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array() {
        var cacheKey = 'array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_name();
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_integer();
            if (result4 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result5 = "]";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, index) { return new AstArrayRef(name, index); })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constant() {
        var cacheKey = 'constant@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_boolean_const();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_string_const();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_float_const();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_integer_const();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boolean_const() {
        var cacheKey = 'boolean_const@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "true") {
          var result3 = "true";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        if (result3 !== null) {
          var result1 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(bool) { return new AstConstant('BOOLEAN', bool[0] == 't'); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_const() {
        var cacheKey = 'string_const@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(string) { return new AstConstant('STRING', string.join('')); })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float_const() {
        var cacheKey = 'float_const@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_float();
        var result0 = result1 !== null
          ? (function(flt) { return new AstConstant('FLOAT', flt); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer_const() {
        var cacheKey = 'integer_const@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_integer();
        var result0 = result1 !== null
          ? (function(int) { return new AstConstant('INTEGER', int); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float() {
        var cacheKey = 'float@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_integer();
        if (result2 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(int, decimal) { return int + parseFloat('.' + decimal.join('') + '0'); })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result5 = "-";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result2 = result5 !== null ? result5 : '';
        if (result2 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, int) { return parseFloat(sign + int.join('')); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_name() {
        var cacheKey = 'name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, remainder) { return first + remainder.join(''); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_types() {
        var cacheKey = 'types@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "integer") {
          var result5 = "integer";
          pos += 7;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"integer\"");
          }
        }
        if (result5 !== null) {
          var result1 = result5;
        } else {
          if (input.substr(pos, 5) === "float") {
            var result4 = "float";
            pos += 5;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"float\"");
            }
          }
          if (result4 !== null) {
            var result1 = result4;
          } else {
            if (input.substr(pos, 6) === "string") {
              var result3 = "string";
              pos += 6;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"string\"");
              }
            }
            if (result3 !== null) {
              var result1 = result3;
            } else {
              if (input.substr(pos, 7) === "boolean") {
                var result2 = "boolean";
                pos += 7;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"boolean\"");
                }
              }
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(type) { return type.toUpperCase(); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_system_methods() {
        var cacheKey = 'system_methods@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "print") {
          var result2 = "print";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"print\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 5) === "input") {
            var result1 = "input";
            pos += 5;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"input\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }

      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();